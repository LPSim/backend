"""
Team status generated by system.
"""

from typing import List, Literal
from .base import UsageTeamStatus
from ...modifiable_values import DamageIncreaseValue, DamageDecreaseValue
from ...consts import DamageElementalType
from ...event import AfterMakeDamageEventArguments
from ...action import Actions


class CatalyzingField(UsageTeamStatus):
    """
    Catalyzing field.
    """
    name: Literal['CatalyzingField'] = 'CatalyzingField'
    desc: str = (
        'When you deal Electro DMG or Pyro DMG to an opposing active '
        'charactor, DMG dealt +1.'
    )
    version: Literal['3.4'] = '3.4'
    usage: int = 2
    max_usage: int = 2

    def value_modifier_DAMAGE_INCREASE(
            self, value: DamageIncreaseValue,
            mode: Literal['TEST', 'REAL']) -> DamageIncreaseValue:
        """
        Increase damage for dendro or electro damages, and decrease usage.
        TODO only active charactor will count!
        """
        if value.target_player_id == self.position.player_id:
            # attack self, not activate
            return value
        if value.damage_elemental_type in [
            DamageElementalType.DENDRO,
            DamageElementalType.ELECTRO,
        ] and self.usage > 0:
            value.damage += 1
            if mode == 'REAL':
                self.usage -= 1
        return value

    def event_handler_MAKE_DAMAGE(
            self, event: AfterMakeDamageEventArguments) -> List[Actions]:
        """
        When damage made, check whether the team status should be removed.
        Not trigger on AFTER_MAKE_DAMAGE because when damage made, run out
        of usage, but new one is generated, should remove first then generate
        new one, otherwise newly updated status will be removed.
        """
        return self.check_remove_triggered()


class DendroCore(UsageTeamStatus):
    """
    Dendro core.
    """
    name: Literal['DendroCore'] = 'DendroCore'
    desc: str = (
        'When you deal Pyro DMG or Electro DMG to an opposing active '
        'charactor, DMG dealt +2.'
    )
    version: Literal['3.3'] = '3.3'
    usage: int = 1
    max_usage: int = 1

    def value_modifier_DAMAGE_INCREASE(
            self, value: DamageIncreaseValue,
            mode: Literal['TEST', 'REAL']) -> DamageIncreaseValue:
        """
        Increase damage for electro or pyro damages by 2, and decrease usage.
        """
        if value.target_player_id == self.position.player_id:
            # attack self, not activate
            return value
        if value.damage_elemental_type in [
            DamageElementalType.ELECTRO,
            DamageElementalType.PYRO,
        ] and self.usage > 0:
            value.damage += 2
            if mode == 'REAL':
                self.usage -= 1
        return value

    def event_handler_MAKE_DAMAGE(
            self, event: AfterMakeDamageEventArguments) -> List[Actions]:
        """
        When damage made, check whether the team status should be removed.
        """
        return self.check_remove_triggered()


class Crystallize(UsageTeamStatus):
    """
    Crystallize.
    """
    name: Literal['Crystallize'] = 'Crystallize'
    desc: str = (
        'Grants 1 Shield point to your active charactor. '
        '(Can stack. Max 2 Points.)'
    )
    version: Literal['3.3'] = '3.3'
    usage: int = 1
    max_usage: int = 2

    def value_modifier_DAMAGE_DECREASE(
            self, value: DamageDecreaseValue,
            mode: Literal['TEST', 'REAL']) -> DamageDecreaseValue:
        """
        Decrease damage by its usage, and decrease usage.
        """
        if value.target_player_id != self.position.player_id:
            # attack enemy, not activate
            return value
        if self.usage > 0:
            decrease = min(self.usage, value.damage)
            value.damage -= decrease
            if mode == 'REAL':
                self.usage -= decrease
        return value

    def event_handler_MAKE_DAMAGE(
            self, event: AfterMakeDamageEventArguments) -> List[Actions]:
        """
        When damage made, check whether the team status should be removed.
        """
        return self.check_remove_triggered()


SystemTeamStatus = CatalyzingField | DendroCore | Crystallize
